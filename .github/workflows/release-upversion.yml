# Release Upversion
# Runs on release branch push (create method doesn't support ignoring tags yet)
# Designed to run upversion and create a PR with the changes
#
# When the release is tagged and published, merge to stable
# before deleting
name: Release-Upversion-PR

on:
  push:
    branches:
      - 'release/[0-9]+.[0-9]+.[0-9]+' # Only run on major.minor.patch releases

permissions:
  contents: write
  pull-requests: write

jobs:
  pre_job:
    name: Build Preparation
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.gitversion.outputs.buildMetaData }}
      new_version: ${{ steps.gitversion.outputs.majorMinorPatch }}
      major: ${{ steps.gitversion.outputs.major }}
      minor: ${{ steps.gitversion.outputs.minor }}
      patch: ${{ steps.gitversion.outputs.patch }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id:   gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
      - name: Get branch name
        id:   branchname
        uses: nelonoel/branch-name@v1.0.1
      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
  upversion-and-pr:
    name: Upversion and PR
    needs: pre_job
    runs-on: windows-latest
    env:
      build_number: ${{ needs.pre_job.outputs.build_number }}
      new_version: ${{ needs.pre_job.outputs.new_version }}
    steps:
    - uses: actions/checkout@v4
    - name: Run Upversion
      id:   upversion
      shell: pwsh
      run: |
        .\tools\upversion\upversion.ps1
      env:
        MAJORVERSION: ${{ needs.pre_job.outputs.major }}
        MINORVERSION: ${{ needs.pre_job.outputs.minor }}
        PATCHVERSION: ${{ needs.pre_job.outputs.patch }}
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v7
      with:
        commit-message: upversion to version ${{env.new_version}}
        title: Upversion release branch to ${{env.new_version}}
        body: |
          This PR covers the task of upversioning the release branch to its intended version.
          After accepting this PR, you may publish the release after verifying the artifacts.
